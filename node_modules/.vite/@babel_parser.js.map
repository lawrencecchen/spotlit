{
  "version": 3,
  "sources": ["../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/parser/base.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/parser/comments.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/parser/error-codes.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/parser/error-message.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/parser/error.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/plugins/estree.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/tokenizer/context.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/tokenizer/types.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/util/location.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/babel-helper-validator-identifier/src/identifier.ts", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/babel-helper-validator-identifier/src/keyword.ts", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/util/identifier.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/util/scopeflags.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/util/scope.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/plugins/flow/scope.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/util/whitespace.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/tokenizer/state.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/tokenizer/index.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/util/class-scope.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/util/expression-scope.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/util/production-parameter.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/parser/util.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/parser/node.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/plugins/flow/index.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/plugins/jsx/xhtml.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/plugins/jsx/index.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/plugins/typescript/scope.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/plugins/typescript/index.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/plugins/placeholders.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/plugins/v8intrinsic.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/plugin-utils.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/options.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/parser/lval.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/parser/expression.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/parser/statement.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/parser/index.js", "../.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/src/index.js", "dep:@babel_parser"],
  "sourcesContent": ["// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin\u2019s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    return this.plugins.get(plugin)?.[name];\n  }\n}\n\nexport type PluginConfig = string | [string, { [string]: any }];\n", "// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Node, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment>) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaning commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterepret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n", "// @flow\n\nexport const ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ErrorCode = $Values<typeof ErrorCodes>;\n", "// @flow\n\nimport { makeErrorTemplates, ErrorCodes } from \"./error\";\n\n/* eslint sort-keys: \"error\" */\n\n/**\n * @module parser/error-message\n */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = makeErrorTemplates(\n  {\n    AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n    ArgumentsInClass:\n      \"'arguments' is only allowed in functions and class methods.\",\n    AsyncFunctionInSingleStatementContext:\n      \"Async functions can only be declared at the top level or inside a block.\",\n    AwaitBindingIdentifier:\n      \"Can not use 'await' as identifier inside an async function.\",\n    AwaitBindingIdentifierInStaticBlock:\n      \"Can not use 'await' as identifier inside a static block.\",\n    AwaitExpressionFormalParameter:\n      \"'await' is not allowed in async function parameters.\",\n    AwaitNotInAsyncContext:\n      \"'await' is only allowed within async functions and at the top levels of modules.\",\n    AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n    BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n    BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n    BadSetterRestParameter:\n      \"A 'set' accesor function argument must not be a rest parameter.\",\n    ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n    ConstructorClassPrivateField:\n      \"Classes may not have a private field named '#constructor'.\",\n    ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n    ConstructorIsAsync: \"Constructor can't be an async function.\",\n    ConstructorIsGenerator: \"Constructor can't be a generator.\",\n    DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n    DecoratorBeforeExport:\n      \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n    DecoratorConstructor:\n      \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n    DecoratorExportClass:\n      \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n    DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n    DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n    DeletePrivateField: \"Deleting a private field is not allowed.\",\n    DestructureNamedImport:\n      \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n    DuplicateConstructor: \"Duplicate constructor in the same class.\",\n    DuplicateDefaultExport: \"Only one default export allowed per module.\",\n    DuplicateExport:\n      \"`%0` has already been exported. Exported identifiers must be unique.\",\n    DuplicateProto: \"Redefinition of __proto__ property.\",\n    DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n    ElementAfterRest: \"Rest element must be last element.\",\n    EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n    ExportBindingIsString:\n      \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n    ExportDefaultFromAsIdentifier:\n      \"'from' is not allowed as an identifier after 'export default'.\",\n    ForInOfLoopInitializer:\n      \"'%0' loop variable declaration may not have an initializer.\",\n    ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n    ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n    GeneratorInSingleStatementContext:\n      \"Generators can only be declared at the top level or inside a block.\",\n    IllegalBreakContinue: \"Unsyntactic %0.\",\n    IllegalLanguageModeDirective:\n      \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n    IllegalReturn: \"'return' outside of function.\",\n    ImportBindingIsString:\n      'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n    ImportCallArgumentTrailingComma:\n      \"Trailing comma is disallowed inside import(...) arguments.\",\n    ImportCallArity: \"`import()` requires exactly %0.\",\n    ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n    ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n    IncompatibleRegExpUVFlags:\n      \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n    InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n    InvalidCodePoint: \"Code point out of bounds.\",\n    InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n    InvalidDecimal: \"Invalid decimal.\",\n    InvalidDigit: \"Expected number in radix %0.\",\n    InvalidEscapeSequence: \"Bad character escape sequence.\",\n    InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n    InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n    InvalidIdentifier: \"Invalid identifier %0.\",\n    InvalidLhs: \"Invalid left-hand side in %0.\",\n    InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n    InvalidNumber: \"Invalid number.\",\n    InvalidOrMissingExponent:\n      \"Floating-point numbers require a valid exponent after the 'e'.\",\n    InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n    InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n    InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n    InvalidPropertyBindingPattern: \"Binding member expression.\",\n    InvalidRecordProperty:\n      \"Only properties and spread elements are allowed in record definitions.\",\n    InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n    LabelRedeclaration: \"Label '%0' is already declared.\",\n    LetInLexicalBinding:\n      \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n    LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n    MalformedRegExpFlags: \"Invalid regular expression flag.\",\n    MissingClassName: \"A class name is required.\",\n    MissingEqInAssignment:\n      \"Only '=' operator can be used for specifying default value.\",\n    MissingSemicolon: \"Missing semicolon.\",\n    MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n    MixingCoalesceWithLogical:\n      \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n    ModuleAttributeDifferentFromType:\n      \"The only accepted module attribute is `type`.\",\n    ModuleAttributeInvalidValue:\n      \"Only string literals are allowed as module attribute values.\",\n    ModuleAttributesWithDuplicateKeys:\n      'Duplicate key \"%0\" is not allowed in module attributes.',\n    ModuleExportNameHasLoneSurrogate:\n      \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n    ModuleExportUndefined: \"Export '%0' is not defined.\",\n    MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n    NewlineAfterThrow: \"Illegal newline after throw.\",\n    NoCatchOrFinally: \"Missing catch or finally clause.\",\n    NumberIdentifier: \"Identifier directly after number.\",\n    NumericSeparatorInEscapeSequence:\n      \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n    ObsoleteAwaitStar:\n      \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n    OptionalChainingNoNew:\n      \"Constructors in/after an Optional Chain are not allowed.\",\n    OptionalChainingNoTemplate:\n      \"Tagged Template Literals are not allowed in optionalChain.\",\n    OverrideOnConstructor:\n      \"'override' modifier cannot appear on a constructor declaration.\",\n    ParamDupe: \"Argument name clash.\",\n    PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n    PatternHasMethod: \"Object pattern can't contain methods.\",\n    // This error is only used by the smart-mix proposal\n    PipeBodyIsTighter:\n      \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n    PipeTopicRequiresHackPipes:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n    PipeTopicUnbound:\n      \"Topic reference is unbound; it must be inside a pipe body.\",\n    PipeTopicUnconfiguredToken:\n      'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n    PipeTopicUnused:\n      \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n    PipeUnparenthesizedBody:\n      \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n\n    // Messages whose codes start with \u201CPipeline\u201D or \u201CPrimaryTopic\u201D\n    // are retained for backwards compatibility\n    // with the deprecated smart-mix pipe operator proposal plugin.\n    // They are subject to removal in a future major version.\n    PipelineBodyNoArrow:\n      'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n    PipelineBodySequenceExpression:\n      \"Pipeline body may not be a comma-separated sequence expression.\",\n    PipelineHeadSequenceExpression:\n      \"Pipeline head should not be a comma-separated sequence expression.\",\n    PipelineTopicUnused:\n      \"Pipeline is in topic style but does not use topic reference.\",\n    PrimaryTopicNotAllowed:\n      \"Topic reference was used in a lexical context without topic binding.\",\n    PrimaryTopicRequiresSmartPipeline:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n\n    PrivateInExpectedIn:\n      \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n    PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n    RecordExpressionBarIncorrectEndSyntaxType:\n      \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionBarIncorrectStartSyntaxType:\n      \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionHashIncorrectStartSyntaxType:\n      \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n    RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n    SloppyFunction:\n      \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n    StaticPrototype: \"Classes may not have static property named prototype.\",\n    StrictDelete: \"Deleting local variable in strict mode.\",\n    StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n    StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n    StrictFunction:\n      \"In strict mode code, functions can only be declared at top level or inside a block.\",\n    StrictNumericEscape:\n      \"The only valid numeric escape in strict mode is '\\\\0'.\",\n    StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n    StrictWith: \"'with' in strict mode.\",\n    SuperNotAllowed:\n      \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n    SuperPrivateField: \"Private fields can't be accessed on super.\",\n    TrailingDecorator: \"Decorators must be attached to a class element.\",\n    TupleExpressionBarIncorrectEndSyntaxType:\n      \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionBarIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionHashIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n    UnexpectedAwaitAfterPipelineBody:\n      'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n    UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n    UnexpectedImportExport:\n      \"'import' and 'export' may only appear at the top level.\",\n    UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n    UnexpectedLeadingDecorator:\n      \"Leading decorators must be attached to a class declaration.\",\n    UnexpectedLexicalDeclaration:\n      \"Lexical declaration cannot appear in a single-statement context.\",\n    UnexpectedNewTarget:\n      \"`new.target` can only be used in functions or class properties.\",\n    UnexpectedNumericSeparator:\n      \"A numeric separator is only allowed between two digits.\",\n    UnexpectedPrivateField: \"Unexpected private name.\",\n    UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n    UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n    UnexpectedToken: \"Unexpected token '%0'.\",\n    UnexpectedTokenUnaryExponentiation:\n      \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n    UnsupportedBind: \"Binding should be performed on object property.\",\n    UnsupportedDecoratorExport:\n      \"A decorated export must export a class declaration.\",\n    UnsupportedDefaultExport:\n      \"Only expressions, functions or classes are allowed as the `default` export.\",\n    UnsupportedImport:\n      \"`import` can only be used in `import()` or `import.meta`.\",\n    UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n    UnsupportedParameterDecorator:\n      \"Decorators cannot be used to decorate parameters.\",\n    UnsupportedPropertyDecorator:\n      \"Decorators cannot be used to decorate object literal properties.\",\n    UnsupportedSuper:\n      \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n    UnterminatedComment: \"Unterminated comment.\",\n    UnterminatedRegExp: \"Unterminated regular expression.\",\n    UnterminatedString: \"Unterminated string constant.\",\n    UnterminatedTemplate: \"Unterminated template.\",\n    VarRedeclaration: \"Identifier '%0' has already been declared.\",\n    YieldBindingIdentifier:\n      \"Can not use 'yield' as identifier inside a generator.\",\n    YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n    ZeroDigitNumericSeparator:\n      \"Numeric separator can not be used after leading 0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport const SourceTypeModuleErrorMessages = makeErrorTemplates(\n  {\n    ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n    ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  },\n  /* code */ ErrorCodes.SourceTypeModuleError,\n);\n", "// @flow\n/* eslint sort-keys: \"error\" */\nimport { type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\nimport { type ErrorCode, ErrorCodes } from \"./error-codes\";\nimport { type Node } from \"../types\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n  reasonCode?: String,\n};\nexport type ParsingError = SyntaxError & ErrorContext;\n\nexport type ErrorTemplate = {\n  code: ErrorCode,\n  template: string,\n  reasonCode: string,\n};\nexport type ErrorTemplates = {\n  [key: string]: ErrorTemplate,\n};\n\ntype Origin = {| node: Node |} | {| at: Position |};\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"placeholders\"\n  | typeof undefined;\n\nfunction keepReasonCodeCompat(reasonCode: string, syntaxPlugin: SyntaxPlugin) {\n  if (!process.env.BABEL_8_BREAKING) {\n    // For consistency in TypeScript and Flow error codes\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nexport function makeErrorTemplates(\n  messages: {\n    [key: string]: string,\n  },\n  code: ErrorCode,\n  syntaxPlugin?: SyntaxPlugin,\n): ErrorTemplates {\n  const templates: ErrorTemplates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode],\n    });\n  });\n  return Object.freeze(templates);\n}\n\nexport { ErrorCodes };\nexport {\n  ErrorMessages as Errors,\n  SourceTypeModuleErrorMessages as SourceTypeModuleErrors,\n} from \"./error-message\";\n\nexport type raiseFunction = (ErrorTemplate, Origin, ...any) => void;\nexport type ErrorData = {| message: ErrorTemplate, loc: Position |};\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  raise(\n    { code, reasonCode, template }: ErrorTemplate,\n    origin: Origin,\n    ...params: any\n  ): Error | empty {\n    return this.raiseWithData(\n      origin.node ? origin.node.loc.start : origin.at,\n      { code, reasonCode },\n      template,\n      ...params,\n    );\n  }\n\n  /**\n   * Raise a parsing error on given position pos. If errorRecovery is true,\n   * it will first search current errors and overwrite the error thrown on the exact\n   * position before with the new error message. If errorRecovery is false, it\n   * fallbacks to `raise`.\n   *\n   * @param {number} pos\n   * @param {string} errorTemplate\n   * @param {...any} params\n   * @returns {(Error | empty)}\n   * @memberof ParserError\n   */\n  raiseOverwrite(\n    loc: Position,\n    { code, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    const pos = loc.index;\n    const message =\n      template.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n        if (error.pos === pos) {\n          return Object.assign(error, { message });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n    return this._raise({ code, loc, pos }, message);\n  }\n\n  raiseWithData(\n    loc: Position,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const pos = loc.index;\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n", "// @flow\n\nimport { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parser/error\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object, key) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        return node;\n      }\n\n      return super.toAssignable(node, isLHS);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, ...args) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { node: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { node: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, ...args);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc?: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n", "// @flow\n\n// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX openning tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n", "// @flow\nimport { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the \u201Cargument\u201D subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\n// Internally the tokenizer stores token as a number\nexport opaque type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport const tt: { [name: string]: TokenType } = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\", { beforeExpr }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n", "// @flow\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n", "import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n", "const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n", "/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n", "// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n", "// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport * as N from \"../types\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  declare raise: raiseFunction;\n  declare inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(Errors.VarRedeclaration, { at: loc }, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n", "// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n", "// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n", "// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { ErrorData, ParsingError } from \"../parser/error\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParsingError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, ErrorData> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n", "// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport ParserErrors, { Errors, type ErrorTemplate } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +hasPrecedingLineBreak: () => boolean;\n  +unexpected: (loc?: ?Position, type?: TokenType) => empty;\n  +expectPlugin: (name: string, loc?: Position) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simpified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(({ message, loc }) =>\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(message, { at: loc }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    // $FlowIgnore\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      { at: this.state.curPosition() },\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        } else if (\n          forbiddenSiblings.indexOf(prev) > -1 ||\n          forbiddenSiblings.indexOf(next) > -1 ||\n          Number.isNaN(next)\n        ) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(Errors.NumericSeparatorInEscapeSequence, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(\n            Errors.InvalidDigit,\n            { at: this.state.curPosition() },\n            radix,\n          );\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        { at: createPositionWithColumnOffset(startLoc, 2) },\n        radix,\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(Errors.InvalidCodePoint, { at: this.state.curPosition() });\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads tempalte continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    ++this.state.pos; // eat '`' or `}`\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: createPositionWithColumnOffset(this.state.startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === charCodes.graveAccent) {\n        ++this.state.pos; // eat '`'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateTail, containsInvalid ? null : out);\n        return;\n      }\n      if (\n        ch === charCodes.dollarSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.leftCurlyBrace\n      ) {\n        this.state.pos += 2; // eat '${'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateNonTail, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(message: ErrorTemplate, loc: Position) {\n    if (this.state.strict && !this.state.strictErrors.has(loc.index)) {\n      this.raise(message, { at: loc });\n    } else {\n      this.state.strictErrors.set(loc.index, { loc, message });\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(\n            Errors.StrictNumericEscape,\n            // We immediately follow a \"\\\\\", and we're an 8 or a 9, so we must\n            // be on the same line.\n            createPositionWithColumnOffset(this.state.curPosition(), -1),\n          );\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          // We immediately follow a \"\\\\\", and we're something between 0 and 7,\n          // so we must be on the same line.\n          const codePos = createPositionWithColumnOffset(\n            this.state.curPosition(),\n            -1,\n          );\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(Errors.StrictNumericEscape, codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codeLoc = this.state.curPosition();\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(Errors.InvalidEscapeSequence, { at: codeLoc });\n      } else {\n        this.state.pos = codeLoc.index - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(\n        Errors.InvalidEscapedReservedWord,\n        { at: this.state.startLoc },\n        tokenLabelName(type),\n      );\n    }\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {}\n}\n", "// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  declare raise: raiseFunction;\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.raise(Errors.InvalidPrivateFieldResolution, { at: loc }, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(Errors.PrivateNameRedeclaration, { at: loc }, name);\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.raise(Errors.InvalidPrivateFieldResolution, { at: loc }, name);\n    }\n  }\n}\n", "// @flow\n\nimport type { ErrorData, ErrorTemplate, raiseFunction } from \"../parser/error\";\nimport { Position } from \"./location\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser/error-message) will be recorded in\nsome expression scopes and thrown later when we know what the ambigous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  errors: Map</* pos */ number, ErrorData> = new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(message: ErrorTemplate, loc: Position) {\n    this.errors.set(loc.index, { message, loc });\n  }\n  clearDeclarationError(loc: Position) {\n    this.errors.delete(loc.index);\n  }\n  iterateErrors(iterator: (data: ErrorData) => void) {\n    this.errors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n  declare raise: raiseFunction;\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    loc: Position,\n    template: ErrorTemplate,\n  ): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(template, loc);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    this.raise(template, { at: loc });\n  }\n\n  /**\n   * Record parenthesized identifier errors\n   *\n   * A parenthesized identifier in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordParenthesizedIdentifierError(\n    template: ErrorTemplate,\n    loc: Position,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(template, { at: loc });\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(template, loc);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError(\n    template: ErrorTemplate,\n    loc: Position,\n  ): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(template, loc);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors(({ message, loc }) => {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(message, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(loc);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n", "// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n", "// @flow\n\nimport { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport { Errors, type ErrorTemplate, ErrorCodes } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport type { PluginConfig } from \"./base\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(\n    node: Node,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(token: TokenType, template?: ErrorTemplate): void {\n    if (!this.eatContextual(token)) {\n      if (template != null) {\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        throw this.raise(template, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: ?Position): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEndLoc.index) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(\n        {\n          code: ErrorCodes.SyntaxError,\n          reasonCode: \"UnexpectedSpace\",\n          template: message,\n        },\n        { at: this.state.lastTokEndLoc },\n        /* eslint-enable @babel/development-internal/dry-error-messages */\n      );\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(loc?: ?Position, type?: ?TokenType): empty {\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    throw this.raise(\n      {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template:\n          type != null\n            ? `Unexpected token, expected \"${tokenLabelName(type)}\"`\n            : \"Unexpected token\",\n      },\n      { at: loc != null ? loc : this.state.startLoc },\n    );\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  getPluginNamesFromConfigs(pluginConfigs: Array<PluginConfig>): Array<string> {\n    return pluginConfigs.map(c => {\n      if (typeof c === \"string\") {\n        return c;\n      } else {\n        return c[0];\n      }\n    });\n  }\n\n  expectPlugin(pluginConfig: PluginConfig, loc?: ?Position): true {\n    if (!this.hasPlugin(pluginConfig)) {\n      throw this.raiseWithData(\n        loc != null ? loc : this.state.startLoc,\n        { missingPlugin: this.getPluginNamesFromConfigs([pluginConfig]) },\n        `This experimental syntax requires enabling the parser plugin: ${JSON.stringify(\n          pluginConfig,\n        )}.`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(pluginConfigs: Array<PluginConfig>): void {\n    if (!pluginConfigs.some(c => this.hasPlugin(c))) {\n      throw this.raiseWithData(\n        this.state.startLoc,\n        { missingPlugin: this.getPluginNamesFromConfigs(pluginConfigs) },\n        `This experimental syntax requires enabling one of the following parser plugin(s): ${pluginConfigs\n          .map(c => JSON.stringify(c))\n          .join(\", \")}.`,\n      );\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParsingError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParsingError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: ?Position = null;\n  doubleProtoLoc: ?Position = null;\n  privateKeyLoc: ?Position = null;\n  optionalParametersLoc: ?Position = null;\n}\n", "// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n", "// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  type BindingTypes,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = makeErrorTemplates(\n  {\n    AmbiguousConditionalArrow:\n      \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n    AmbiguousDeclareModuleKind:\n      \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n    AssignReservedType: \"Cannot overwrite reserved type %0.\",\n    DeclareClassElement:\n      \"The `declare` modifier can only appear on class fields.\",\n    DeclareClassFieldInitializer:\n      \"Initializers are not allowed in fields with the `declare` modifier.\",\n    DuplicateDeclareModuleExports:\n      \"Duplicate `declare module.exports` statement.\",\n    EnumBooleanMemberNotInitialized:\n      \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n    EnumDuplicateMemberName:\n      \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n    EnumInconsistentMemberValues:\n      \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n    EnumInvalidExplicitType:\n      \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidExplicitTypeUnknownSupplied:\n      \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidMemberInitializerPrimaryType:\n      \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n    EnumInvalidMemberInitializerSymbolType:\n      \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n    EnumInvalidMemberInitializerUnknownType:\n      \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n    EnumInvalidMemberName:\n      \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n    EnumNumberMemberNotInitialized:\n      \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n    EnumStringMemberInconsistentlyInitailized:\n      \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n    GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n    ImportTypeShorthandOnlyInPureImport:\n      \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n    InexactInsideExact:\n      \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n    InexactInsideNonObject:\n      \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n    InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n    InvalidNonTypeImportInDeclareModule:\n      \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n    MissingTypeParamDefault:\n      \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n    NestedDeclareModule:\n      \"`declare module` cannot be used inside another `declare module`.\",\n    NestedFlowComment:\n      \"Cannot have a flow comment inside another flow comment.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n    SpreadVariance: \"Spread properties cannot have variance.\",\n    ThisParamAnnotationRequired:\n      \"A type annotation is required for the `this` parameter.\",\n    ThisParamBannedInConstructor:\n      \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n    ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n    ThisParamMustBeFirst:\n      \"The `this` parameter must be the first function parameter.\",\n    ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n    TypeBeforeInitializer:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeCastInPattern:\n      \"The type cast expression is expected to be wrapped with parenthesis.\",\n    UnexpectedExplicitInexactInObject:\n      \"Explicit inexact syntax must appear at the end of an inexact object.\",\n    UnexpectedReservedType: \"Unexpected reserved type %0.\",\n    UnexpectedReservedUnderscore:\n      \"`_` is only allowed as a type argument to call or new.\",\n    UnexpectedSpaceBetweenModuloChecks:\n      \"Spaces between `%` and `checks` are not allowed here.\",\n    UnexpectedSpreadType:\n      \"Spread operator cannot appear in class or interface definitions.\",\n    UnexpectedSubtractionOperand:\n      'Unexpected token, expected \"number\" or \"bigint\".',\n    UnexpectedTokenAfterTypeParameter:\n      \"Expected an arrow function after this type parameter declaration.\",\n    UnexpectedTypeParameterBeforeAsyncArrowFunction:\n      \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n    UnsupportedDeclareExportKind:\n      \"`declare export %0` is not supported. Use `%1` instead.\",\n    UnsupportedStatementInDeclareModule:\n      \"Only declares and type imports are allowed inside declare module.\",\n    UnterminatedFlowComment: \"Unterminated flow-comment.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"flow\",\n);\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", loc: Position, value: N.Node |}\n  | {| type: \"string\", loc: Position, value: N.Node |}\n  | {| type: \"boolean\", loc: Position, value: N.Node |}\n  | {| type: \"invalid\", loc: Position |}\n  | {| type: \"none\", loc: Position |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              node: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              node: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              node: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            { at: this.state.startLoc },\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        { at: startLoc },\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: ?Position = null;\n        let inexactStartLoc: ?Position = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStartLoc: ?Position,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { node: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { node: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              node: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { node: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { node: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { node: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            node: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(\n          Errors.InvalidIdentifier,\n          { at: this.state.curPosition() },\n          fullWord,\n        );\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc?: ?Position,\n      isLHS: boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            node: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      ...args:\n        | [string, BindingTypes | void]\n        | [\n            string,\n            BindingTypes | void,\n            ?Set<string>,\n            boolean | void,\n            boolean | void,\n          ]\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { node: method });\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { node: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { node: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { node: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.loc.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { node: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { node: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { node: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { node: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          node: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line no-unused-vars\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(\n              Errors.ImportBindingIsString,\n              { node: specifier },\n              firstIdent.value,\n            );\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          node: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { node: typeParameters },\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          node: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { node: node.params[i] });\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos = end + 2 + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        { at: loc },\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      loc: Position,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        { at: loc },\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      return this.raise(\n        explicitType === \"boolean\" ||\n          explicitType === \"number\" ||\n          explicitType === \"string\"\n          ? FlowErrors.EnumInvalidMemberInitializerPrimaryType\n          : explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerUnknownType,\n        { at: loc },\n        enumName,\n        memberName,\n        explicitType,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumNumberMemberNotInitialized,\n        { at: loc },\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        { node },\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(\n            FlowErrors.EnumInvalidMemberName,\n            { node: id },\n            memberName,\n            // suggestion\n            memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          );\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(\n            FlowErrors.EnumDuplicateMemberName,\n            { node: id },\n            memberName,\n            enumName,\n          );\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(tt._of)) {\n        if (!tokenIsIdentifier(this.state.type)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(\n              FlowErrors.EnumInconsistentMemberValues,\n              { at: nameLoc },\n              enumName,\n            );\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n", "// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n", "// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = makeErrorTemplates(\n  {\n    AttributeIsEmpty:\n      \"JSX attributes must only be assigned a non-empty expression.\",\n    MissingClosingTagElement:\n      \"Expected corresponding JSX closing tag for <%0>.\",\n    MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n    UnexpectedSequenceExpression:\n      \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n    UnsupportedJsxValue:\n      \"JSX value should be either an expression or a quoted JSX text.\",\n    UnterminatedJsxContent: \"Unterminated JSX contents.\",\n    UnwrappedAdjacentJSXElements:\n      \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"jsx\",\n);\n/* eslint-disable sort-keys */\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              const htmlEntity =\n                ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\";\n              const char = this.input[this.state.pos];\n              this.raise(\n                {\n                  code: ErrorCodes.SyntaxError,\n                  reasonCode: \"UnexpectedToken\",\n                  template: `Unexpected token \\`${char}\\`. Did you mean \\`${htmlEntity}\\` or \\`{'${char}'}\\`?`,\n                },\n                { at: this.state.curPosition() },\n              );\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEndLoc.index,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_oTag);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              node: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            node: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            JsxErrors.MissingClosingTagElement,\n            // $FlowIgnore\n            { node: closingElement },\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              JsxErrors.MissingClosingTagElement,\n              // $FlowIgnore\n              { node: closingElement },\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n", "// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n", "// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport {\n  Errors,\n  makeErrorTemplates,\n  type ErrorTemplate,\n  ErrorCodes,\n} from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = makeErrorTemplates(\n  {\n    AbstractMethodHasImplementation:\n      \"Method '%0' cannot have an implementation because it is marked abstract.\",\n    AbstractPropertyHasInitializer:\n      \"Property '%0' cannot have an initializer because it is marked abstract.\",\n    AccesorCannotDeclareThisParameter:\n      \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n    AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n    ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n    ClassMethodHasReadonly:\n      \"Class methods cannot have the 'readonly' modifier.\",\n    ConstructorHasTypeParameters:\n      \"Type parameters cannot appear on a constructor declaration.\",\n    DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n    DeclareClassFieldHasInitializer:\n      \"Initializers are not allowed in ambient contexts.\",\n    DeclareFunctionHasImplementation:\n      \"An implementation cannot be declared in ambient contexts.\",\n    DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n    DuplicateModifier: \"Duplicate modifier: '%0'.\",\n    EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n    EmptyTypeArguments: \"Type argument list cannot be empty.\",\n    EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n    ExpectedAmbientAfterExportDeclare:\n      \"'export declare' must be followed by an ambient declaration.\",\n    ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n    IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n    IndexSignatureHasAbstract:\n      \"Index signatures cannot have the 'abstract' modifier.\",\n    IndexSignatureHasAccessibility:\n      \"Index signatures cannot have an accessibility modifier ('%0').\",\n    IndexSignatureHasDeclare:\n      \"Index signatures cannot have the 'declare' modifier.\",\n    IndexSignatureHasOverride:\n      \"'override' modifier cannot appear on an index signature.\",\n    IndexSignatureHasStatic:\n      \"Index signatures cannot have the 'static' modifier.\",\n    InvalidModifierOnTypeMember:\n      \"'%0' modifier cannot appear on a type member.\",\n    InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n    InvalidTupleMemberLabel:\n      \"Tuple members must be labeled with a simple identifier.\",\n    MissingInterfaceName:\n      \"'interface' declarations must be followed by an identifier.\",\n    MixedLabeledAndUnlabeledElements:\n      \"Tuple members must all have names or all not have names.\",\n    NonAbstractClassHasAbstractMethod:\n      \"Abstract methods can only appear within an abstract class.\",\n    NonClassMethodPropertyHasAbstractModifer:\n      \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n    OptionalTypeBeforeRequired:\n      \"A required element cannot follow an optional element.\",\n    OverrideNotInSubClass:\n      \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    PrivateElementHasAbstract:\n      \"Private elements cannot have the 'abstract' modifier.\",\n    PrivateElementHasAccessibility:\n      \"Private elements cannot have an accessibility modifier ('%0').\",\n    ReadonlyForMethodSignature:\n      \"'readonly' modifier can only appear on a property declaration or index signature.\",\n    ReservedArrowTypeParam:\n      \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n    ReservedTypeAssertion:\n      \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n    SetAccesorCannotHaveOptionalParameter:\n      \"A 'set' accessor cannot have an optional parameter.\",\n    SetAccesorCannotHaveRestParameter:\n      \"A 'set' accessor cannot have rest parameter.\",\n    SetAccesorCannotHaveReturnType:\n      \"A 'set' accessor cannot have a return type annotation.\",\n    StaticBlockCannotHaveModifier:\n      \"Static class blocks cannot have any modifier.\",\n    TypeAnnotationAfterAssign:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeImportCannotSpecifyDefaultAndNamed:\n      \"A type-only import can specify a default import or named bindings, but not both.\",\n    TypeModifierIsUsedInTypeExports:\n      \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n    TypeModifierIsUsedInTypeImports:\n      \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n    UnexpectedParameterModifier:\n      \"A parameter property is only allowed in a constructor implementation.\",\n    UnexpectedReadonly:\n      \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n    UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n    UnexpectedTypeCastInParameter:\n      \"Unexpected type cast in parameter position.\",\n    UnsupportedImportTypeArgument:\n      \"Argument in a type import must be a string literal.\",\n    UnsupportedParameterPropertyKind:\n      \"A parameter property may not be declared using a binding pattern.\",\n    UnsupportedSignatureParameterKind:\n      \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"typescript\",\n);\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): ?T {\n      if (!tokenIsIdentifier(this.state.type)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers(\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      errorTemplate?: ErrorTemplate,\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): void {\n      const enforceOrder = (loc, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(\n            TSErrors.InvalidModifiersOrder,\n            { at: loc },\n            before,\n            after,\n          );\n        }\n      };\n      const incompatible = (loc, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, { at: loc }, mod1, mod2);\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc }, modifier);\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          // $FlowIgnore\n          this.raise(errorTemplate, { at: startLoc }, modifier);\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): ?(T[]) {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              TSErrors.UnsupportedSignatureParameterKind,\n              { node: pattern },\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              node: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        node,\n        [\"readonly\"],\n        [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n        TSErrors.InvalidModifierOnTypeMember,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            node: elementNode,\n          });\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            node: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { node: type });\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node: N.TsKeywordType = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          { at: this.state.lastTokStartLoc },\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(\n          TSErrors.EmptyHeritageClauseType,\n          { at: originalStartLoc },\n          descriptor,\n        );\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkLVal(\n          node.id,\n          \"typescript interface declaration\",\n          BIND_TS_INTERFACE,\n        );\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsInType(() => {\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        \"typescript enum declaration\",\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          \"module or namespace declaration\",\n          BIND_TS_NAMESPACE,\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          node: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (starttype) {\n          case tt._function:\n            nany.declare = true;\n            return this.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* declarationPosition */ true,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to now how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._const:\n            if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n              // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n              this.expect(tt._const);\n              this.expectContextual(tt._enum);\n              return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n            }\n          // falls through\n          case tt._var:\n            kind = kind || this.state.value;\n            return this.parseVarStatement(nany, kind);\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          default: {\n            if (tokenIsIdentifier(starttype)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n              );\n            }\n          }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"enum\":\n          if (next || tokenIsIdentifier(this.state.type)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers(modified, [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"override\",\n          \"readonly\",\n        ]);\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { node: pp });\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { node });\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            node: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n          if (typeArguments) {\n            if (isOptionalCall && !this.match(tt.parenL)) {\n              missingParenErrorLoc = this.state.curPosition();\n              this.unexpected();\n            }\n\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                // $FlowIgnore\n                node.optional = isOptionalCall;\n              }\n\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (tokenIsTemplate(this.state.type)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      // tsTryParseAndCatch is expensive, so avoid if not necessary.\n      // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n      // Also handles `new C<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArgumentsInExpression();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: Position, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          node: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const interfaceNode = this.startNode();\n        this.next();\n        const result = this.tsParseInterfaceDeclaration(interfaceNode);\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt._enum) {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.next(); // eat 'const'\n          this.expectContextual(tt._enum);\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ];\n      this.tsParseModifiers(\n        member,\n        modifiers,\n        /* disallowedModifiers */ undefined,\n        /* errorTemplate */ undefined,\n        /* stopOnStartOfClassStaticBlock */ true,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { node: member });\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            TSErrors.IndexSignatureHasAccessibility,\n            { node: member },\n            (member: any).accessibility,\n          );\n        }\n        if ((member: any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { node: member });\n        }\n        if ((member: any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { node: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          node: member,\n        });\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { node: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { node: methodOrProp });\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { node: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      let declaration: ?N.Declaration;\n\n      if (tokenIsIdentifier(this.state.type)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          { at: this.state.startLoc },\n          key.type === \"Identifier\" && !node.computed\n            ? key.name\n            : `[${this.input.slice(key.start, key.end)}]`,\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { node });\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          TSErrors.PrivateElementHasAccessibility,\n          { node },\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          node: typeParameters,\n        });\n      }\n\n      // $FlowIgnore\n      if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { node: method }, method.kind);\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: ?N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { node: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node), isLHS);\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isLHS);\n        case \"ParenthesizedExpression\":\n          return this.toAssignableParenthesizedExpression(node, isLHS);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean) {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      contextDescription: string,\n      ...args:\n        | [BindingTypes | void]\n        | [BindingTypes | void, ?Set<string>, boolean | void, boolean | void]\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(expr.parameter, \"parameter property\", ...args);\n          return;\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (\n            /*bindingType*/ !args[0] &&\n            contextDescription !== \"parenthesized expression\" &&\n            !expr.extra?.parenthesized\n          ) {\n            this.raise(Errors.InvalidLhs, { node: expr }, contextDescription);\n            break;\n          }\n          this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n          return;\n        case \"TSNonNullExpression\":\n          this.checkLVal(expr.expression, contextDescription, ...args);\n          return;\n        default:\n          super.checkLVal(expr, contextDescription, ...args);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          node: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n                node: expr,\n              });\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | typeof undefined {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            node,\n          });\n          this.next();\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(\n            TSErrors.AbstractMethodHasImplementation,\n            { node: method },\n            key.type === \"Identifier\" && !method.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n          );\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: any,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = this.parseIdentifier();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = this.parseIdentifier();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        leftOfAs = this.parseIdentifier();\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkLVal(node[rightOfAsKey], \"import specifier\", BIND_LEXICAL);\n      }\n    }\n  };\n", "// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { makeErrorTemplates, ErrorCodes } from \"../parser/error\";\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = makeErrorTemplates(\n  {\n    ClassNameIsRequired: \"A class name is required.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"placeholders\",\n);\n/* eslint-disable sort-keys */\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n", "import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n", "// @flow\n\nimport type Parser from \"./parser\";\nimport type { PluginConfig } from \"./parser/base\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = $ReadOnlyArray<PluginConfig>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\n// This function\u2019s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVerionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n", "// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startColumn: number,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n", "// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: ObjectOrClassMember, */\n  /*:: ClassMember, */\n  /*:: ObjectMember, */\n  /*:: TsNamedTypeElementBase, */\n  /*:: Identifier, */\n  /*:: PrivateName, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  +parseObjPropValue: (\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => void;\n  +parsePropertyName: (\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ) => Expression | Identifier;\n  +parsePrivateName: () => PrivateName\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression. If isLHS is `true`, the following cases are allowed:\n                                    `[(a)] = [0]`, `[(a.b)] = [0]`\n\n   * @returns {Node} The converted assignable pattern\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordParenthesizedIdentifierError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(\n            Errors.InvalidParenthesizedAssignment,\n            node.loc.start,\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg, isLHS);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { node: prop.key },\n      );\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raise(Errors.RestTrailingComma, { node: prop });\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc?: ?Position,\n    isLHS: boolean,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n        if (elt.type === \"RestElement\") {\n          this.raise(Errors.RestTrailingComma, { node: elt });\n        }\n      }\n    }\n    return exprList;\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(prop: RestElement): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(): ObjectMember | RestElement {\n    const prop = this.startNode();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n\n    return prop;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  /**\n   * Verify that if a node is an lval - something that can be assigned to.\n   *\n   * @param {Expression} expr The given node\n   * @param {string} contextDescription The auxiliary context information printed when error is thrown\n   * @param {BindingTypes} [bindingType=BIND_NONE] The desired binding type. If the given node is an identifier and `bindingType` is not\n                                                   BIND_NONE, `checkLVal` will register binding to the parser scope\n                                                   See also src/util/scopeflags.js\n   * @param {?Set<string>} checkClashes An optional string set to check if an identifier name is included. `checkLVal` will add checked\n                                        identifier name to `checkClashes` It is used in tracking duplicates in function parameter lists. If\n                                        it is nullish, `checkLVal` will skip duplicate checks\n   * @param {boolean} [disallowLetBinding] Whether an identifier named \"let\" should be disallowed\n   * @param {boolean} [strictModeChanged=false] Whether an identifier has been parsed in a sloppy context but should be reinterpreted as\n                                                strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @memberof LValParser\n   */\n  checkLVal(\n    expr: Expression,\n    contextDescription: string,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?Set<string>,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\": {\n        const { name } = expr;\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(name, this.inModule)\n            : isStrictBindOnlyReservedWord(name))\n        ) {\n          this.raise(\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            { node: expr },\n            name,\n          );\n        }\n\n        if (checkClashes) {\n          if (checkClashes.has(name)) {\n            this.raise(Errors.ParamDupe, { node: expr });\n          } else {\n            checkClashes.add(name);\n          }\n        }\n        if (disallowLetBinding && name === \"let\") {\n          this.raise(Errors.LetInLexicalBinding, { node: expr });\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(name, bindingType, expr.loc.start);\n        }\n        break;\n      }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(Errors.InvalidPropertyBindingPattern, {\n            node: expr,\n          });\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (this.isObjectMethod(prop)) continue;\n\n          this.checkLVal(\n            prop,\n            \"object destructuring pattern\",\n            bindingType,\n            checkClashes,\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              \"array destructuring pattern\",\n              bindingType,\n              checkClashes,\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          \"assignment pattern\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          \"rest element\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          \"parenthesized expression\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      default: {\n        this.raise(\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          { node: expr },\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(Errors.InvalidRestAssignmentPattern, {\n        node: node.argument,\n      });\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n", "// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts \u2014 that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\ndeclare var invariant;\n*/\n\nconst invalidHackPipeBodies = new Map([\n  [\"ArrowFunctionExpression\", \"arrow function\"],\n  [\"AssignmentExpression\", \"assignment\"],\n  [\"ConditionalExpression\", \"conditional\"],\n  [\"YieldExpression\", \"yield\"],\n]);\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: ?boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { node: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { node: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParsingError,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left, /* isLHS */ true);\n\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startPos\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startPos\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startPos\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, { node: left }, value);\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(\n                  Errors.PipeBodyIsTighter,\n                  { at: this.state.startLoc },\n                  this.state.value,\n                );\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (invalidHackPipeBodies.has(body.type) && !body.extra?.parenthesized) {\n      this.raise(\n        Errors.PipeUnparenthesizedBody,\n        { at: startLoc },\n        invalidHackPipeBodies.get(body.type),\n      );\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        node: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startLoc, Errors.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, optionalChainMember);\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          Errors.ImportCallArity,\n          { node },\n          this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { node: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression \u2014 either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { node: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(\n          Errors.PrivateInExpectedIn,\n          { at: this.state.startLoc },\n          this.state.value,\n        );\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that \u201Ctopic token\u201D.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the \u201Ctopic token\u201D, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token\u2019s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin\u2019s configuration matches the current token\u2019s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin\u2019s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin\u2019s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin\u2019s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin\u2019s configuration.\n      throw this.raise(\n        Errors.PipeTopicUnconfiguredToken,\n        { at: startLoc },\n        tokenLabelName(tokenType),\n      );\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin\u2019s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration\u2019s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n        this.state.start + 1,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        Errors.UnsupportedMetaProperty,\n        { node: node.property },\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(SourceTypeModuleErrors.ImportMetaOutsideModule, {\n          node: id,\n        });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(\n        val,\n        startPos,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { node: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call \u2014 at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { node: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(\n      elemStart,\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: explain\n          at: createPositionWithColumnOffset(startLoc, 2),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      elem,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return elem;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { node: prop });\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(\n            Errors.AccessorIsGenerator,\n            { at: this.state.curPosition() },\n            keyName,\n          );\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { node: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { node: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop: $FlowFixMe).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaLoc: ?Position,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead \u2260 {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaLoc: ?Position,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaLoc, false);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorOrigin =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? { at: node.key.loc.end }\n                : { node };\n\n            this.raise(Errors.IllegalLanguageModeDirective, errorOrigin);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              \"function name\",\n              BIND_OUTSIDE,\n              undefined,\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = new Set();\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        \"function parameter list\",\n        BIND_VAR,\n        allowDuplicates ? null : checkClashes,\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(\n          Errors.UnexpectedToken,\n          { at: this.state.curPosition() },\n          \",\",\n        );\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(\n        Errors.AwaitBindingIdentifier,\n        startLoc,\n      );\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, { at: startLoc }, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, { at: startLoc }, word);\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      node.loc.start,\n      Errors.AwaitExpressionFormalParameter,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      node.loc.start,\n      Errors.YieldInParameter,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser\u2019s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line no-unused-vars\n    prop: N.ObjectOrClassMember | N.ClassMember,\n  ): void {}\n}\n", "// @flow\n\nimport * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // $FlowIgnore: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name, loc] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at: loc }, name);\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(SourceTypeModuleErrors.ImportOutsideModule, { node });\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(\n        Errors.IllegalBreakContinue,\n        { node },\n        isBreak ? \"break\" : \"continue\",\n      );\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { node: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { node: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, { node: expr }, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: ?Position,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        Errors.ForInOfLoopInitializer,\n        { node: init },\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, { node: init }, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.raise(\n              Errors.DeclarationMissingInitializer,\n              { at: this.state.lastTokEndLoc },\n              \"Const declarations\",\n            );\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            { at: this.state.lastTokEndLoc },\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      \"variable declaration\",\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { node: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassProperty> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateProperty> = member;\n    const accessorProp: $FlowSubtype<N.ClassAccessorProperty> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          node: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { node: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { node: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { node: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { node: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { node: member });\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { node: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = (prop.key: N.Expression);\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { node: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              node: declaration,\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportedName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(\n                Errors.ExportBindingIsString,\n                { node: specifier },\n                local.value,\n                exportedName,\n              );\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, { node });\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        { node },\n        name,\n      );\n    }\n    this.exportedIdentifiers.add(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(\n          Errors.ModuleExportNameHasLoneSurrogate,\n          { node: result },\n          surrogate[0].charCodeAt(0).toString(16),\n        );\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          { at: this.state.startLoc },\n          keyName,\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(\n          Errors.ModuleAttributeDifferentFromType,\n          { node: node.key },\n          node.key.name,\n        );\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          { node: node.key },\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: any,\n    importedIsString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(\n          Errors.ImportBindingIsString,\n          { node: specifier },\n          imported.value,\n        );\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n", "// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n", "// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { getExportedToken, tt as internalTokenTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n", "export default require(\"./node_modules/.pnpm/@babel+parser@7.17.0/node_modules/@babel/parser/lib/index.js\");"],
  "mappings": "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E;MACF,2BAA2B;MAC3B,sBAAsB;MACtB,kBAAkB;MAClB,uBACE;MACF,kBAAkB;MAClB,sBAAsB;MACtB,2BACE;MACF,kCACE;MACF,6BACE;MACF,mCACE;MACF,kCACE;MACF,uBAAuB;MACvB,0BAA0B;MAC1B,mBAAmB;MACnB,kBAAkB;MAClB,kBAAkB;MAClB,kCACE;MACF,mBACE;MACF,uBACE;MACF,4BACE;MACF,uBACE;MACF,WAAW;MACX,oBAAoB;MACpB,kBAAkB;MAElB,mBACE;MACF,4BACE;MACF,kBACE;MACF,4BACE;MACF,iBACE;MACF,yBACE;MAMF,qBACE;MACF,gCACE;MACF,gCACE;MACF,qBACE;MACF,wBACE;MACF,mCACE;MAEF,qBACE;MACF,0BAA0B;MAC1B,2CACE;MACF,6CACE;MACF,8CACE;MACF,eAAe;MACf,mBAAmB;MACnB,gBACE;MACF,iBAAiB;MACjB,cAAc;MACd,qBAAqB;MACrB,4BAA4B;MAC5B,gBACE;MACF,qBACE;MACF,oBAAoB;MACpB,YAAY;MACZ,iBACE;MACF,mBAAmB;MACnB,mBAAmB;MACnB,0CACE;MACF,4CACE;MACF,6CACE;MACF,+BAA+B;MAC/B,kCACE;MACF,0BAA0B;MAC1B,wBACE;MACF,mBAAmB;MACnB,4BACE;MACF,8BACE;MACF,qBACE;MACF,4BACE;MACF,wBAAwB;MACxB,wBAAwB;MACxB,iBAAiB;MACjB,iBAAiB;MACjB,oCACE;MACF,iBAAiB;MACjB,4BACE;MACF,0BACE;MACF,mBACE;MACF,yBAAyB;MACzB,+BACE;MACF,8BACE;MACF,kBACE;MACF,qBAAqB;MACrB,oBAAoB;MACpB,oBAAoB;MACpB,sBAAsB;MACtB,kBAAkB;MAClB,wBACE;MACF,kBAAkB;MAClB,2BACE;OAEO,WAAW;AAGjB,QAAM,gCAAgC,mBAC3C;MACE,yBAA0B;MAC1B,qBAAsB;OAEb,WAAW;ACzNxB,kCAA8B,YAAoB,cAA4B;AACzC;AAEjC,YAAI,iBAAiB,UAAU,eAAe,qBAAqB;AACjE,iBAAO;;;AAGX,aAAO;;AA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E,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,GAAE,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,MAAK,IAAG,IAAG,MAAK,MAAK,KAAI,MAAK,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,MAAK,GAAE,MAAK,IAAG,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,IAAG,GAAE,GAAE,KAAI,MAAK,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,MAAK,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,MAAK,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,IAAG,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,MAAK,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,MAAK,OAAM,IAAG,MAAK,GAAE,KAAI,GAAE,MAAK,IAAG,MAAK,MAAK,KAAI,MAAK;AAEl6C,QAAM,wBAAwB,CAAC,KAAI,GAAE,KAAI,GAAE,KAAI,GAAE,KAAI,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,KAAI,GAAE,KAAI,GAAE,GAAE,GAAE,KAAI,GAAE,KAAI,IAAG,IAAG,GAAE,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,KAAI,IAAG,GAAE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3B,mBAAO,CAAC,CAAE,eAAc;iBACnB;AAEL,mBAAO;;;AAGX,YAAI,cAAc,kBAAkB,MAAM,MAAM,IAAI,OAAO;AACzD,iBAAO;;AAGT,eAAO,MAAM,oBAAoB,GAAG;;MAGtC,iBAAiB,IAAkB;AACjC,cAAM,gBAAgB,KAAK,WAAW;AACtC,cAAM;UAAE;YAAS;AACjB,YACE,CAAC,cAAc,MAAM,IAAI,SACzB,CAAC,cAAc,mBAAmB,IAAI,OACtC;AACA,gBAAM,iBAAiB;;;;ACjD7B,qBAAoB,GAAU;AAC5B,UAAI,KAAK,MAAM;AAEb,cAAM,IAAI,MAAO,cAAa;;AAEhC,aAAO;;AAGT,oBAAgB,GAAkB;AAChC,UAAI,CAAC,GAAG;AACN,cAAM,IAAI,MAAM;;;AAYpB,QAAM,WAAW,mBACf;MACE,iCACE;MACF,gCACE;MACF,mCACE;MACF,iCAAiC;MACjC,uBAAuB;MACvB,wBACE;MACF,8BACE;MACF,iBAAiB;MACjB,iCACE;MACF,kCACE;MACF,gCAAgC;MAChC,mBAAmB;MACnB,yBAAyB;MACzB,oBAAoB;MACpB,qBAAqB;MACrB,mCACE;MACF,0BAA0B;MAC1B,uBAAuB;MACvB,2BACE;MACF,gCACE;MACF,0BACE;MACF,2BACE;MACF,yBACE;MACF,6BACE;MACF,uBAAuB;MACvB,yBACE;MACF,sBACE;MACF,kCACE;MACF,mCACE;MACF,0CACE;MACF,4BACE;MACF,uBACE;MACF,mBACE;MACF,2BACE;MACF,gCACE;MACF,4BACE;MACF,wBACE;MACF,uBACE;MACF,uCACE;MACF,mCACE;MACF,gCACE;MACF,+BACE;MACF,2BACE;MACF,wCACE;MACF,iCACE;MACF,iCACE;MACF,6BACE;MACF,oBACE;MACF,0BAA0B;MAC1B,+BACE;MACF,+BACE;MACF,kCACE;MACF,mCACE;OAEO,WAAW,aACH;AAMrB,iCACE,OACwC;AACxC,cAAQ;aACD;AACH,iBAAO;aACJ;AACH,iBAAO;aACJ;AACH,iBAAO;aACJ;AACH,iBAAO;aACJ;AACH,iBAAO;aACJ;AACH,iBAAO;aACJ;AACH,i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",
  "names": []
}
